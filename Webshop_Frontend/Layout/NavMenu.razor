@inject AuthService AuthService

<nav class="navbar navbar-expand-lg navbar-dark bg-primary fixed-top shadow">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">Webshop</a>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/products">Proizvodi</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/cart">Košarica</a>
                </li>
            </ul>

            <ul class="navbar-nav ms-auto">
                @if (isLoggedIn)
                {
                    <li class="nav-item">
                        <button class="btn btn-warning nav-link" @onclick="Logout">
                            Odjava
                        </button>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/login">Prijava</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/register">Registracija</a>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

@code {
    private bool isLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        isLoggedIn = await AuthService.IsLoggedIn();
        AuthService.OnAuthStateChanged += OnAuthStateChanged;
    }

    private async void OnAuthStateChanged()
    {
        isLoggedIn = await AuthService.IsLoggedIn();
        StateHasChanged();
    }

    private async Task Logout()
    {
        await AuthService.Logout();
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= OnAuthStateChanged;
    }
}