@page "/cart/checkout"
@using System.ComponentModel.DataAnnotations
@using Webshop_Frontend.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CartService CartService

<h3 class="text-center mb-4">Završetak kupnje</h3>

@if (CartService.Items.Count == 0)
{
    <div class="alert alert-warning text-center">
        Košarica je prazna.
        <button @onclick="NavigateToProducts" class="btn btn-primary mt-3">Povratak na proizvode</button>
    </div>
}
else
{
    <div class="checkout-form-container">
        <EditForm Model="@orderDto" OnValidSubmit="@PlaceOrder">
            <DataAnnotationsValidator />

            <!-- Podaci korisnika -->
            <div class="form-group mb-3">
                <label>Ime i prezime:</label>
                <InputText @bind-Value="orderDto.FullName" class="form-control" />
                <ValidationMessage For="@(() => orderDto.FullName)" class="custom-validation-message" />
            </div>

            <div class="form-group mb-3">
                <label>Adresa:</label>
                <InputText @bind-Value="orderDto.Address" class="form-control" />
                <ValidationMessage For="@(() => orderDto.Address)" class="custom-validation-message" />
            </div>

            <div class="form-group mb-3">
                <label>Email:</label>
                <InputText @bind-Value="orderDto.Email" class="form-control" />
                <ValidationMessage For="@(() => orderDto.Email)" class="custom-validation-message" />
            </div>

            <div class="form-group mb-3">
                <label>Telefon (opcionalno):</label>
                <InputText @bind-Value="orderDto.Phone" class="form-control" />
                <ValidationMessage For="@(() => orderDto.Phone)" class="custom-validation-message" />
            </div>

            <!-- Način plaćanja -->
            <div class="form-group mb-4">
                <label>Način plaćanja:</label>
                <InputSelect @bind-Value="orderDto.PaymentMethod" class="form-select">
                    @foreach (PaymentMethod method in Enum.GetValues(typeof(PaymentMethod)))
                    {
                        if (method == PaymentMethod.Gotovina)
                        {
                            <option value="@method">Plaćanje pouzećem</option>
                        }
                        else
                        {
                            <option value="@method">@method</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => orderDto.PaymentMethod)" class="custom-validation-message" />
            </div>

            <!-- PayPal opcija -->
            @if (orderDto.PaymentMethod == PaymentMethod.PayPal)
            {
                <div class="paypal-container text-center">
                    <!-- PayPal ikonica -->
                    <img src="https://www.paypalobjects.com/webstatic/mktg/logo/pp_cc_mark_111x69.jpg" 
                         alt="PayPal" 
                         style="margin-top: 10px;" />

                    <!-- PayPal gumb -->
                    <button class="paypal-button" @onclick="RedirectToPayPal">
                        Idi na PayPal
                    </button>
                </div>
            }

            <!-- Polja za kartično plaćanje -->
            @if (orderDto.PaymentMethod == PaymentMethod.Kartica)
            {
                <div class="card p-3 mb-3 shadow-sm">
                    <h5 class="text-center">Detalji plaćanja karticom</h5>

                    <div class="form-group mb-3">
                        <label>Broj kartice:</label>
                        <InputText @bind-Value="cardNumber" class="form-control"
                                   placeholder="1234 5678 9012 3456"
                                   oninput="FormatCardNumber(event)" />
                        <ValidationMessage For="@(() => cardNumber)" class="custom-validation-message" />
                    </div>

                    <div class="form-group mb-3">
                        <label>Datum isteka (MM/YY):</label>
                        <InputText @bind-Value="expirationDate" class="form-control"
                                   placeholder="MM/YY"
                                   oninput="FormatExpirationDate(event)" />
                        <ValidationMessage For="@(() => expirationDate)" class="custom-validation-message" />
                    </div>

                    <div class="form-group mb-3">
                        <label>CVV:</label>
                        <InputText @bind-Value="cvv" class="form-control"
                                   placeholder="123"
                                   maxlength="3"
                                   oninput="FormatCVV(event)" />
                        <ValidationMessage For="@(() => cvv)" class="custom-validation-message" />
                    </div>
                </div>
            }

            <!-- Dugme za potvrdu narudžbe -->
            <button type="submit" class="btn btn-success w-100 mt-3">
                <i class="bi bi-check-circle"></i> Završi narudžbu
            </button>
        </EditForm>
    </div>

    <!-- Lokalni stilovi forme -->
    <style>
        .checkout-form-container {
            max-width: 500px;
            margin: 0 auto;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: #f9f9f9;
            box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.1);
        }

        .custom-validation-message {
            color: #ff0000;
            font-size: 0.9rem;
            font-weight: 600;
            margin-top: 0.25rem;
        }

        .paypal-button {
            background: #0070BA; /* PayPal plava boja */
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
        }

        .paypal-button:hover {
            background: #005EA6; /* Tamnija PayPal boja na hover */
        }
    </style>

    <script>
        // Formatiranje broja kartice (razmak nakon svake 4 znamenke)
        function FormatCardNumber(e) {
            let input = e.target;
            let value = input.value.replace(/\D/g, ''); // Dozvoljava samo brojke
            if (value.length > 16) {
                value = value.substring(0, 16);
            }
            let formattedValue = value.match(/.{1,4}/g)?.join(' ') || value;
            input.value = formattedValue;
        }

        // Formatiranje datuma isteka (MM/YY)
        function FormatExpirationDate(e) {
            let input = e.target;
            let value = input.value.replace(/\D/g, '');
            if (value.length <= 2) {
                input.value = value;
            } else {
                input.value = value.substring(0, 2) + '/' + value.substring(2, 4);
            }
        }

        // Formatiranje CVV (maksimalno 3 brojke)
        function FormatCVV(e) {
            let input = e.target;
            let value = input.value.replace(/\D/g, ''); // Dozvoljava samo brojke
            if (value.length > 3) {
                value = value.substring(0, 3); // Ograničenje na 3 cifre
            }
            input.value = value;
        }
    </script>
}

@code {
    private OrderDto orderDto = new();
    private string cardNumber;
    private string expirationDate;
    private string cvv;

    private async Task PlaceOrder()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/orders", orderDto);
            if (response.IsSuccessStatusCode)
            {
                var orderId = await response.Content.ReadFromJsonAsync<int>();
                Navigation.NavigateTo($"/order-confirmation/{orderId}");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Greška: {e.Message}");
        }
    }

    private void NavigateToProducts()
    {
        Navigation.NavigateTo("/products");
    }

    private void RedirectToPayPal()
    {
        Navigation.NavigateTo("https://www.paypal.com/login", true);
    }
}